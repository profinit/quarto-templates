stages:
  - deploy

variables:
  GIT_STRATEGY: clone  # always clone fresh
  GIT_DEPTH: 0  # clone with all comits
  DOCS_IMAGE_NAME: "quarto-templates-docs-prod"
  DOCS_CONTAINER_NAME: "quarto-templates-docs-prod"
  DOCS_PORT: 31270


docs-vm-local:
  stage: deploy
  script:
    - docker image build . -t "${DOCS_IMAGE_NAME}" -f ".docker/docs.dockerfile"
    - |
      # Stop and remove the container if it is running
      if [ $(docker container ls -q -f name="${DOCS_CONTAINER_NAME}") ]; then
          docker container stop ${DOCS_CONTAINER_NAME}
          docker container rm ${DOCS_CONTAINER_NAME}
      fi
    - docker container run -d -p ${DOCS_PORT}:5000 --name "${DOCS_CONTAINER_NAME}" ${DOCS_IMAGE_NAME} quarto preview . --host 0.0.0.0 --port 5000 --render all
  only:
    - master
  when: manual
  tags:
    - shell


github:
  image:
    name: alpine/git:2.40.1
    entrypoint: [""]
  stage: deploy
  script:
    # set up variables
    - git config --global user.name "CI"
    - git config --global user.email "CI@git.profinit.eu"
    # set up as a on proper branch (not detached)
    - git checkout $CI_COMMIT_BRANCH || git checkout -b $CI_COMMIT_BRANCH
    # set github remote and fetch
    - git remote add github https://${GITHUB_ACCESS_TOKEN}@github.com/profinit/quarto-templates
    - git fetch --all
    - git reset --hard origin/$CI_COMMIT_BRANCH  # update to the last commit of the branch
    # push to remote (don't force, only update new commits)
    - git push --tags -u github $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH
  only:
    - master
  when: manual
  tags:
    - quarto-templates