---
title: Tips and Tricks
---

## Development Environment

We recommend using the following development environments:

- Python: Visual Studio Code. More information can be found [here](https://quarto.org/docs/tools/vscode.html).
- R: RStudio IDE. More information can be found [here](https://quarto.org/docs/tools/rstudio.html).

## Duplicate Template Installation

In the guide, it was mentioned for simplification during installation that it is necessary to install the templates to each `qmd` file. However, this can be avoided in several ways.

### Quarto Project

[Quarto Project](https://quarto.org/docs/projects/quarto-projects.html) allows us to group several reports into one project. These projects can then be rendered together and otherwise globally set. The template can thus be installed only in the root directory of the quarto project.

Example directory structure:

```
quarto_project/
    _extensions/  # the installed template resides here
    _quarto.yml  # configuration file for Quarto Project
    report1.qmd
    report2.qmd
```

### Link

Instead of duplication, we can introduce a link (symlink) to the required places to the `_extensions` directory.

::: {.panel-tabset}

#### Linux

```sh
ln -s /path/to/original/directory /path/to/symlink
```

::::

## Python: Rendering Tables

**We recommend converting the table to Markdown before rendering.** This will allow us to refer to that table in the text later. This requires the `tabulate` package in addition to the regular pandas package.

For example:

```{python}
#| label: tbl-example
#| tbl-cap: "Table Example"

import pandas as pd
import numpy as np
from IPython.display import Markdown
from tabulate import tabulate

data = pd.DataFrame({"sex": ["male", "female"], "age": [15, 16]})
Markdown(
  tabulate(
    data.head(),
    headers=list(data.columns),
    showindex=False
    )
  )
```

You can then refer to this table using the label in the following way: @tbl-example.

## Table Styles

### Corporate Look

Simply add the CSS class `corporate-table` in the following way.

::: {.panel-tabset}

#### Markdown

```{.markdown}
| sex      | age |
|----------|-----|
| male     | 16  |
| female   | 15  |
: Example of a corporate table in Markdown {#tbl-corporate-md .corporate-table}
```

| sex      | age |
|----------|-----|
| male     | 16  |
| female   | 15  |
: Example of a corporate table in Markdown {#tbl-corporate-md .corporate-table}

#### Python

```{python}
#| class: corporate-table
#| label: tbl-corporate-python
#| tbl-cap: "Example of a corporate table in Python"

#| class: corporate-table

import pandas as pd
import numpy as np
from IPython.display import Markdown
from tabulate import tabulate

data = pd.DataFrame({"sex": ["male", "female"], "age": [15, 16]})
Markdown(
  tabulate(
    data.head(),
    headers=list(data.columns),
    showindex=False
    )
  )
```

#### R

TODO

:::

## Interactive Tables

::: {.panel-tabset}

### Python

::: {.callout-warning}

- Interactive tables via `itables` package work only in `html` and `revealjs` outputs.
- Setting up `label` in Quarto breaks the table. Do not use it.
- `tbl-cap` doesn't work.

:::


```{python}
import itables
from itables.sample_dfs import get_countries

# initialize
itables.init_notebook_mode()

itables.show(get_countries())
```

::: {.callout-tip}

We can also use with `corporate-table` class.

:::

### R

TODO

:::

## RevealJS: Too Long Slide Content

This can be resolved using the `{.scrollable}` option, which can be added after the heading.

For instance:

```{.markdown}
## Tables {.scrollable}
```
