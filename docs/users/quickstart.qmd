---
title: "Quick Start"
format:
    profinit-html:
        number-sections: true
        number-depth: 2
---

## Prerequisites

- Quarto.
- (Optional) Python: only needed if we are using Python code blocks. If we don't want to use the default installation, we should have our Python activated.
- (Optional) R: only needed if we are using R code blocks.
- (Optional) Tex: needed when exporting to pdf. After installing Quarto, this can be done with the following command: `quarto install tinytex`.

### Python: Packages

In Python, we want to have the following packages installed:

- `jupyter`: necessary for generating reports.
- (Recommended) `tabulate`: recommended for better table handling, see [Rendering Tables in Python](tricks.qmd#python-rendering-tables).
- (Optional) `itables`: can be used to have interactive tables in some outputs. Check out [Interactive Tables section](tricks.qmd#interactive-tables).

## Installation

Assume that we have some file `file.qmd`, which we want to render with new templates using Quarto.

Before installation, we first need to go to the directory where this file is located.

::: {.panel-tabset}

### Linux

```{.sh}
cd /path/to/file/qmd/directory
```

### Windows (Powershell)

```{.ps1}
cd /path/to/file/qmd/directory
```

:::

```sh
quarto add profinit/quarto-templates
```

This command will add a `_extensions` folder to the working directory.

## Usage

Now we are in the directory with `file.qmd`. Now by using the following commands

::: {.panel-tabset}

### Html

```bash
quarto render file.qmd --to profinit-html
```

### Pdf

```bash
quarto render file.qmd --to profinit-pdf
```

### Revealjs

```bash
quarto render file.qmd --to profinit-revealjs
```

### Docx

```bash
quarto render file.qmd --to profinit-docx
```

:::

We can also use Quarto to render all configured formats in the Quarto header:

```{.sh}
quarto render file.qmd
```

::: {.callout-note}

When rendering, the Profinit Quarto templates must be installed in the directory from which we are launching the rendering.

:::

::: {.callout-warning}

The rendering of all configured formats sometimes doesn't work, when `docx` and `pdf` outputs are both configured.

:::
